name: Deploy to Amazon ECS - PROD

on:
  workflow_dispatch: 
      
env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    env:
      ECR_REPOSITORY: graphql/${{ vars.SERVICELOWERCASE }}           # set this to your Amazon ECR repository name
      ECS_SERVICE: ${{ vars.SERVICE }}-Service                 # set this to your Amazon ECS service name
      ECS_CLUSTER: ${{ vars.SERVICEUPPERCASE }}QL             # set this to your Amazon ECS cluster name
      ECS_TASK_DEFINITION: devops/${{ vars.SERVICELOWERCASE }}-service-TD.json  # set this to the path to your Amazon ECS task definition                                                            # file, e.g. .aws/task-definition.json
      CONTAINER_NAME_WEB: ${{ vars.SERVICELOWERCASE }}_django
      CONTAINER_NAME_PROXY: ${{ vars.SERVICELOWERCASE }}_nginx
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f devops/Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
#        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
#refresh the API using bash scripts existing on API hosts
    - name: Refresh the API!
      run: |
        curl \
          -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
          https://api.github.com/repos/org/repo2/actions/workflows/run-ssh.yml/dispatches \
          -d '{"ref":"refs/heads/master"}'  
